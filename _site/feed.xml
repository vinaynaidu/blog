<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home</title>
    <description>Welcome to the musings of a curious coder</description>
    <link>http://blog.vinaynaidu.com/</link>
    <atom:link href="http://blog.vinaynaidu.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 06 Apr 2016 13:02:58 +0100</pubDate>
    <lastBuildDate>Wed, 06 Apr 2016 13:02:58 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>How would you tweet if you were drunk?</title>
        <description>&lt;h3&gt;Why did I make a drunk twitter bot?&lt;/h3&gt;

&lt;p&gt;There are plenty of things I love about being a Londoner. One of those is hanging out with my pals in one of the many amazing pubs. Not because I love to drink, but because my friends turn hilarious when they are too drunk.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s always fascinating to me, as someone who&amp;#39;s never been drunk, to see the language capabilities of my friends deteriorate after every drink; it&amp;#39;s been the cause of many a drunk whatsapp text messages that were hilarious the next day.&lt;/p&gt;

&lt;p&gt;Got me thinking though, Can I teach a bot to construct sentences in a way drunk people would? Well, that was the start of a few fun days of programming, and the result is this &lt;a href=&quot;https://twitter.com/drunktweetbot&quot; target=&quot;_blank&quot;&gt;Drunk Twitter Bot&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Okay... So what does it do?&lt;/h4&gt;

&lt;p&gt;Exactly what the above section summarises. The bot goes through your tweets, dynamically constructs a lexicography of your twitter vocabulary, gets drunk, constructs a sentence, and tweets it back to you. Result is a tweet that &lt;em&gt;could&lt;/em&gt; be similar if you tweeted while you were drunk.&lt;/p&gt;

&lt;p&gt;Here are some drunk tweets that are constructed this way: &lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/Ed_Johnson&quot;&gt;@Ed_Johnson&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/IfIWereYouAndDrunk?src=hash&quot;&gt;#IfIWereYouAndDrunk&lt;/a&gt; : The Hawks have been holding back for some cheesecake....nah man&lt;/p&gt;&amp;mdash; Drunk Tweeter (@drunktweetbot) &lt;a href=&quot;https://twitter.com/drunktweetbot/status/602685532452343808&quot;&gt;25 May 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/dzhdzhdijidiji&quot;&gt;@dzhdzhdijidiji&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/IfIWereYouAndDrunk?src=hash&quot;&gt;#IfIWereYouAndDrunk&lt;/a&gt; tfw you come from the person in front of the pit lord&lt;/p&gt;&amp;mdash; Drunk Tweeter (@drunktweetbot) &lt;a href=&quot;https://twitter.com/drunktweetbot/status/602705663769354240&quot;&gt;25 May 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/SenoyaDriskell&quot;&gt;@SenoyaDriskell&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/IfIWereYouAndDrunk?src=hash&quot;&gt;#IfIWereYouAndDrunk&lt;/a&gt; YIPPEE!! Thanks for the most importantly... No expectation…&lt;/p&gt;&amp;mdash; Drunk Tweeter (@drunktweetbot) &lt;a href=&quot;https://twitter.com/drunktweetbot/status/602856685015846912&quot;&gt;25 May 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/maggi_nnn&quot;&gt;@maggi_nnn&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/IfIWereYouAndDrunk?src=hash&quot;&gt;#IfIWereYouAndDrunk&lt;/a&gt; : भाग बहनचोद। : The most unselfish love involves the worst way round.&lt;/p&gt;&amp;mdash; Drunk Tweeter (@drunktweetbot) &lt;a href=&quot;https://twitter.com/drunktweetbot/status/601979877860999168&quot;&gt;23 May 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h3&gt;The making&lt;/h3&gt;

&lt;p&gt;One of the first challenges for me when I started working on this idea was to figure out a way to construct a lexicography / dictionary of all the words in English language, and then figure out the symantics and relationship between words so I can construct gramatically valid sentences. As a first prototype, I tried doing that with &lt;a href=&quot;http://neo4j.com/&quot; target=&quot;_blank&quot;&gt;Neo4j&lt;/a&gt;; a NoSql graph database built exactly for this kind of scenarios. &lt;/p&gt;

&lt;p&gt;However, as soon as I started the tedious process of normalizing and converting all the symantics into nodes and relationships for graph database, it became clear to me that this method is probably not very feasible. It would take a lot of manual work on my part to keep it upto date. What if I wanted to expand it to other languages? Oh, let&amp;#39;s not forget all the made up words that people use these days.&lt;/p&gt;

&lt;p&gt;I wanted to be a bit smart about it and make it dynamic so that the bot would learn the language constantly and adapt to the habits of the people it&amp;#39;s trying to immitate. This is also one of the reasons I chose to go the twitter route. Where else am I going to find inexhaustible number of people talking about various things constantly? &lt;/p&gt;

&lt;p&gt;With twitter, Not only I had a ready stream of words pouring in from all over the world, but it was also in various languages, should I chose to expand the bot to other languages.&lt;/p&gt;

&lt;p&gt;Once I had these conclusions drawn, I quickly abandoned the idea of manually constructing the symantics for the language as natural language processing was a much smarter idea.&lt;/p&gt;

&lt;h3&gt;Enter Markov&amp;#39;s Chain&lt;/h3&gt;

&lt;p&gt;The twitter bot now looks at trending stream, picks up random user, constructs a dictionary of all the words in all the tweets in that account simply by counting all the occurance of a word w.r.t. the count of words that follows the given word, and the word that is followed by the given word.&lt;/p&gt;

&lt;p&gt;For example, consider this sentence: &lt;code&gt;&amp;quot;It was a nice day. All the nice days had plenty sun.&amp;quot;&lt;/code&gt; Looking at the word &lt;code&gt;day&lt;/code&gt;, there are two occurances. (I &lt;a href=&quot;https://en.wikipedia.org/wiki/Stemming&quot; target=&quot;_blank&quot;&gt;stem&lt;/a&gt; the words so the comparision is more accurate). &lt;code&gt;Day&lt;/code&gt; is followed by &lt;code&gt;all&lt;/code&gt;, and &lt;code&gt;had&lt;/code&gt;. It is followed by &lt;code&gt;nice&lt;/code&gt; twice though. So when the bot is constructing a sentence and comes across the word &lt;code&gt;nice&lt;/code&gt;, the probability of the next word being &lt;code&gt;day&lt;/code&gt; is higher than other words.&lt;/p&gt;

&lt;p&gt;For this to happen, I construct a &amp;quot;spinning roulette wheel&amp;quot;, and select the next word in sequence for the sentence based on the weight of the word, proportional to the times the next word occurred. The code for this block is: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(defn wrand
  &amp;quot;given a vector of slice sizes, returns the index of a slice given a
  random spin of a roulette wheel with compartments proportional to
  slices.&amp;quot;
  [slices]
  (let [total (reduce + slices)
        r (rand total)]
    (loop [i 0 sum 0]
      (if (&amp;lt; r (+ (slices i) sum))
        i
        (recur (inc i) (+ (slices i) sum))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I loop through the dictionary and construct an array of words repeated proportional to the times they occured in the dictionary and select a random word from the array. Additionally, I mix up the proportion a little bit to make it seem like a &amp;quot;drunk&amp;quot; sentence.&lt;/p&gt;

&lt;p&gt;Since the sentence is constructed based entirely on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain&quot; target=&quot;_blank&quot;&gt;markov&amp;#39;s chain&lt;/a&gt; algorithm, It has an added benefit of the sentence being in any language.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;th&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/NuDdy_YH&quot;&gt;@NuDdy_YH&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/IfIWereYouAndDrunk?src=hash&quot;&gt;#IfIWereYouAndDrunk&lt;/a&gt; ก้อเดินหน้าต่อไปนะ ทุกคนทำหน้าที่ตัวเองให้ดีที่สุด มีความสุขกับที่เปน จบ&lt;/p&gt;&amp;mdash; Drunk Tweeter (@drunktweetbot) &lt;a href=&quot;https://twitter.com/drunktweetbot/status/602066454993903616&quot;&gt;23 May 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Looks like I offended someone with that tweet! The original tweeter had a few choice words to say about that tweet when he read it!&lt;/p&gt;

&lt;h3&gt;Room for improvement&lt;/h3&gt;

&lt;p&gt;Though the basics of the sentence generation is in place, it is a bit too slow as it constructs the dictionary for every user by placing them in memory. Perhaps changing the dictionary to a better data structure and using redis is a way to make it faster, it needs a bit of research.&lt;/p&gt;

&lt;p&gt;I&amp;#39;d also like to add some interactive-ness to the bot by making it respond to users. If someone wanted to see their own drunk tweet, they could tweet the bot and ask for a drunk tweet. I&amp;#39;ll have to find some time to make these improvements, and when I do, I&amp;#39;ll update this blog post.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jan 2016 17:12:38 +0000</pubDate>
        <link>http://blog.vinaynaidu.com/2016/01/07/how-would-you-tweet-if-you-were-drunk/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2016/01/07/how-would-you-tweet-if-you-were-drunk/</guid>
        
        
      </item>
    
      <item>
        <title>Working with LESS (and Grunt)</title>
        <description>&lt;p&gt;This blog post is more of a reference for me when I have to setup another JS project with grunt and LESS in the future, so I can pick what&amp;#39;s necessary right here rather than googling all over the internet.&lt;/p&gt;

&lt;p&gt;The basics of less is covered in great detail on the source website. Less makes it very easy to write component-style css which is easy to maintain and read. Browsers, however, don&amp;#39;t understand LESS files natively, so they will have to be processed into &lt;code&gt;.css&lt;/code&gt; files. Any time a change is made to a &lt;code&gt;.less&lt;/code&gt; file, it needs to be converted into its css equivalent before the browser can show those changes. This repetitive task can be easily automated with &lt;a href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot;&gt;Grunt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the current project has grunt already configured, running &amp;#39;grunt watch&amp;#39; is all that is required to start the process running.&lt;/p&gt;

&lt;p&gt;To setup the workflow for new projects, below steps can be used as guideline to configure grunt to automate tasks.&lt;/p&gt;

&lt;h2&gt;Configure &lt;code&gt;grunt-contrib-less&lt;/code&gt; to process &lt;code&gt;.less&lt;/code&gt; files&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the &lt;code&gt;grunt-contrib-less&lt;/code&gt; package with: &lt;code&gt;npm install grunt-contrib-less&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once the plugin is installed, load the plugin with &lt;code&gt;grunt.loadNpmTasks(&amp;#39;grunt-contrib-less&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a new task in Gruntfile.js to preprocess less files. The code below instructs grunt to convert &lt;code&gt;src/styles.less&lt;/code&gt; into &lt;code&gt;src/styles.css&lt;/code&gt;, while compressing the destination file (specified in the options)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;less: {
        development: {
            options: {
                compress: true
                yuicompress: true
            },
            files: {
                &amp;quot;src/styles.css&amp;quot;: &amp;quot;src/styles.less&amp;quot;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, register the less task in the default task list with: &lt;code&gt;grunt.registerTask(&amp;#39;default&amp;#39;, [less]);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all there is to it. Now every time grunt is run, the &lt;code&gt;.less&lt;/code&gt; file(s) will be processed and converted into css files.&lt;/p&gt;

&lt;h2&gt;Configure grunt-contrib-watch plugin to automatically process files on change&lt;/h2&gt;

&lt;p&gt;Of course, running the grunt task after every change manually can be tedious. Grunt is meant to automate things, afterall, so we can ask grunt to do this automatically as well, by using the &lt;code&gt;grunt-contrib-watch&lt;/code&gt; plugin. grunt-watch can be told to watch and monitor certain file types (or files) and perform a grunt task when something changes. The tasks can be split into multiple tasks depending on file types or mixed and matched, depending on the project needs. For the purpose of processing less files automatically, calling the above configured less task on file change is enough.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the plugin with npm install grunt-contrib-watch&lt;/li&gt;
&lt;li&gt;Load the plugin by adding grunt.loadNpmTasks(&amp;#39;grunt-contrib-less&amp;#39;); into Gruntfile.js&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the configurations for the watch task with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;watch: {
    styles: {
        files: [&amp;quot;src/styles.less&amp;quot;],
        tasks: [&amp;#39;less&amp;#39;]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Essentially, this is telling grunt-watch to watch for changes in &lt;code&gt;[&amp;quot;src/styles.less&amp;quot;]&lt;/code&gt; and invoke the &lt;code&gt;less&lt;/code&gt; task (configured in step 1) anytime the file changes. Now pull up a command prompt, &lt;code&gt;cd&lt;/code&gt; to project directory, and run grunt watch and the watch task will fire up and start watching the files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It is recommended to not register watch task into the default task list if the CI is configured to run grunt as this will result in files being watched indefinitely, thereby resulting in infinite compile time. Either configure a second task list with &amp;#39;dev&amp;#39; options and run &lt;code&gt;grunt dev&lt;/code&gt; for watching if multiple tasks are needed, or just running grunt watch manually.&lt;/p&gt;

&lt;h2&gt;Taking watch a step further with LiveReload&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://livereload.com/&quot; target=&quot;_blank&quot;&gt;LiveReload&lt;/a&gt; is a cool plugin that automatically refreshes the browser anytime a file that it is monitoring changes. What this means, is that it eliminates the need to focus the browser and hit refresh manually every time a change is made. It is a great tool to increase productivity as the programmer can now just focus on the editor and save changes, to see the results automatically update on the browser.
What makes it even better, is that Grunt-watch plugin has livereload built in, all that&amp;#39;s needed is to enable it on the watch options configuration. To get the browser to refresh however, there are a few steps required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable LiveReload in watch configuration&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;watch: {
    options: {
        livereload: true
    },
    styles: {
        files: [&amp;quot;src/styles.less&amp;quot;],
        tasks: [&amp;#39;less&amp;#39;]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;now running grunt watch will start the LiveReload server on default port 35729.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add &lt;code&gt;&amp;lt;script src=&amp;quot;//localhost:35729/livereload.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; to the index.html file and refresh the page once.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the &lt;code&gt;.less&lt;/code&gt; file is monitored for any change and browser is updated automatically on save. Other files like .html and .js can also be added to the file list so the browser updates when there is a change on those files too.&lt;/p&gt;

&lt;p&gt;Since livereload script file is not needed in the index.html on production, grunt can be configured to remove the script on other environmental builds as well. grunt-grep is a plugin that will help with this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install grunt-grep with &lt;code&gt;npm install grunt-grep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;&amp;lt;!--@grep dev--&amp;gt;&lt;/code&gt; next to the livereload script tag&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure Gruntfile.js with&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
    grep: {
      options: {
        fileOverride: true
      },
      production: {
        files: {
          &amp;#39;src/index.html&amp;#39;: [
            &amp;#39;src/index.html&amp;#39;
          ]
        },
        options: {
          pattern: &amp;#39;dev&amp;#39;
        }
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally register the task under default tasks, and you&amp;#39;re all set to concentrate on coding something fun without fuffing about with browsers and command lines too often!&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 10:41:00 +0000</pubDate>
        <link>http://blog.vinaynaidu.com/2015/12/20/working-with-grunt-and-less/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2015/12/20/working-with-grunt-and-less/</guid>
        
        
      </item>
    
      <item>
        <title>Kickass custom Slack bot</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://slack.com&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt; is cool. I&amp;#39;ve used it for quite a while now and I think it&amp;#39;s my favourite communications tool so far. What really makes slack awesome is its amazing integrations. There&amp;#39;s an integration for pretty much everything you can think of. Github notifications, jenkin builds, jira task managements, my favourite &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;random gifs&lt;/a&gt; for reactions and responses... and the best one by far - custom integrations.  &lt;/p&gt;

&lt;p&gt;What&amp;#39;s so great about custom integrations? You want to push certain version of your app to staging or test machine? just type &lt;code&gt;/jarvis deploy api to test&lt;/code&gt;, or maybe &lt;code&gt;/jarvis deploy pacman 2.3 to staging&lt;/code&gt;. Or maybe you just want a definition of some big word someone just used; type in &lt;code&gt;/jarvis define retrospective&lt;/code&gt;. How about a fun random definition of something from urban dictionary? you can do &lt;code&gt;/jarvis urban senator&lt;/code&gt; or even &lt;code&gt;/jarvis urban IIRC&lt;/code&gt; if you cannot recall the full form of an acronym from the ever expanding list. Oh, I know, how about this - you&amp;#39;re having a bad day and you just need something to cheer you up. Jarvis to the rescue again! Type &lt;code&gt;/jarvis pugme&lt;/code&gt; would result in the bot posting a random picture of a pug (courtesy of &lt;a href=&quot;https://pugme.herokuapp.com&quot; target=&quot;_blank&quot;&gt;pugme&lt;/a&gt;). Anyway, you get the idea.   &lt;/p&gt;

&lt;p&gt;I setup a custom slash command backed by a bot running on Heroku, because, hey, heroku is awesome and free. The command, lets assume, was called &lt;code&gt;Jarvis&lt;/code&gt; (yes, borrowed from the famous Ironman). Jarvis lets me do all of that, and has plenty room to extend the supported commands.    &lt;/p&gt;

&lt;p&gt;I&amp;#39;ll go over the steps I took to build the slack bot, and mention any reasons that went behind the choices. Word of warning though, this is going to be a high level overview of the process, rather than a step by step walkthrough. Nevertheless, there will be enough details to put the pieces together to make your own slackbot.   &lt;/p&gt;

&lt;h3&gt;Slack integrations&lt;/h3&gt;

&lt;p&gt;First things first, you will need a slack account. Slack is amazingly developer friendly and supports &lt;a href=&quot;https://api.slack.com/&quot; target=&quot;_blank&quot;&gt;multiple types of integrations&lt;/a&gt;. Incoming and outgoing webhooks, Realtime Web Api, custom slash commands, just to mention a few. Their documentation is very detailed and the support team are very friendly too, I was stuck around a few minor things a couple of times and both times they helped me understand the api and possible workarounds for what I wanted to achieve, when it wasn&amp;#39;t directly supported. So all in all, I&amp;#39;d say if you want to develop a custom slack integration, you&amp;#39;re in good hands.  &lt;/p&gt;

&lt;p&gt;The easiest choice to work with, that takes minimal effort to setup, is the remote control. It is literally a &lt;code&gt;HTTP POST&lt;/code&gt;. No fuss. The next level up is webhooks, and naturally I went with the incoming and outgoing webhooks at first. But I soon realised that they were very restrictive in terms of permissions. I wanted the bot to respond to calls anywhere - private and public channels, or one to one messages; and it&amp;#39;s something you cannot do with either webhooks or remote control. So the current bot works with a slash command.  &lt;/p&gt;

&lt;p&gt;The slash command request also expects a 200 header response and is limited in formatting options. I had to mention who issued the command etc and the incoming webhooks has great formatting options for that kind of thing, so almost all tasks, as soon as they receive the slash command, send an empty 200 response and then follow up with an incoming webhook with actual response. For the end user, the difference is nil, all they see is they get a response for their slash command, they are none the wiser and I get to process and format my commands. It&amp;#39;s almost as good as having a cake AND eating it.   &lt;/p&gt;

&lt;h3&gt;Setup a custom slash command&lt;/h3&gt;

&lt;p&gt;The idea behind slash command is simple enough - you setup a &lt;a href=&quot;https://api.slack.com/slash-commands&quot; target=&quot;_blank&quot;&gt;new slash command&lt;/a&gt; and every time someone issues a the slash command, some data is sent to a configurable URL via &lt;code&gt;HTTP POST&lt;/code&gt;. Taken from the documentation, the &lt;code&gt;POST&lt;/code&gt; data could look like this:  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
    token=gIkuvaNzQIHg97ATvDxqgjtO
    team_id=T0001
    team_domain=example
    channel_id=C2147483705
    channel_name=test
    user_id=U2147483697
    user_name=Steve
    command=/weather
    text=94070
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Public channels are identified by &lt;code&gt;channel_id&lt;/code&gt;, private channels are identified by &lt;code&gt;private_channel_id&lt;/code&gt;, and DM&amp;#39;s (direct messages) are identified by &lt;code&gt;user_id&lt;/code&gt;. However, &lt;code&gt;channel_id&lt;/code&gt; property is named ambiguously, and will contain &lt;code&gt;private_channel_id&lt;/code&gt; or &lt;code&gt;user_id&lt;/code&gt; when posted from private channel and DM respectively. Simply put, we can always send the response with original &lt;code&gt;channel_id&lt;/code&gt; to post to the same place the slash command was issued from, regardless of where it was issued from - DM, public or private groups.  &lt;/p&gt;

&lt;p&gt;Once you follow the brain dead simple instructions to setup a slash command, Slack generates a unique &lt;code&gt;Token&lt;/code&gt; for that integration. This token will have to be included in any response json that is being sent as a reply.  &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/slack-custom-slash-command.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;  &lt;/p&gt;

&lt;h3&gt;Making of Slack bot - SpaceRain&lt;/h3&gt;

&lt;p&gt;I used clojure to build my slack bot for two primary reasons:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was closely involved with clojure at the time of starting this bot&lt;/li&gt;
&lt;li&gt;Hosting clojure apps with heroku was extremely easy&lt;/li&gt;
&lt;li&gt;I really, really love clojure. It&amp;#39;s a functional programming bliss.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I said two primary reasons... the last one was probably more important in this decision making than the other two!  &lt;/p&gt;

&lt;p&gt;The entire project is available on github, under the codename &lt;a href=&quot;https://github.com/vinaynaidu/SpaceRain&quot; target=&quot;_blank&quot;&gt;SpaceRain&lt;/a&gt;. I like using codenames for my projects so if the project evolves and deviates from what it originally was planned to do, then the namespaces etc won&amp;#39;t be left behind; Plus it&amp;#39;s also a lot of fun to use codenames.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The deployment and rollback part of the code has since been moved to it&amp;#39;s own project and and SpaceRain simply delegated the process to that project. As all the servers were run on Amazon EC2, the access keys etc had to be kept separate and internal and that project was run on an internal machine. For simplicity reasons, SpaceRain contains none of the deployment code.  &lt;/p&gt;

&lt;h3&gt;And now to the fun stuff&lt;/h3&gt;

&lt;p&gt;Building the actual bot is probably the easiest (and thankfully the most fun) part. The basic idea behind slash command is quite simple.   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User issues a slash command, eg, &lt;code&gt;/Jarvis define protons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Slack does a &lt;code&gt;HTTP POST&lt;/code&gt; with the above given payload to the custom url that was configured when the slash command was setup. Since my bot was deployed on heroku, the url was &lt;code&gt;http://spacerain.herokuapp.com&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; parameter in the request will have any text (&lt;code&gt;string&lt;/code&gt;) that was entered after the command was issued. For eg, the above command would cause &lt;code&gt;text&lt;/code&gt; to contain &lt;code&gt;define protons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read in the &lt;code&gt;text&lt;/code&gt; parameter, do the necessary steps to generate appropriate response JSON payload and reply back with a 200.&lt;/li&gt;
&lt;li&gt;Slack expects a 200 JSON response for the request. If the result is anything but a valid 200 Json payload, slash burps the entire error message into the channel so make to put the code in a nice try catch block and issue empty response with a message such as &lt;code&gt;invalid attempt&lt;/code&gt; or something similar to keep things clean at the user end.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;POST&lt;/code&gt; body will have all the data that is required to process the command and respond to.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;#39;s it, the entirety of slack bot request life cycle. If multiple slash commands are calling the same url, the &lt;code&gt;command&lt;/code&gt; parameter is useful to read in the issued command. For my purposes, I just used one slash command, and several sub-commands style, so I wouldn&amp;#39;t have to modify several command configurations if there was ever a need to move them around.  &lt;/p&gt;

&lt;p&gt;What the backend does is quite straight forward. it reads in the &lt;code&gt;text&lt;/code&gt; parameter and the first word is always the &lt;em&gt;sub command&lt;/em&gt;. So, my bot worked based on these parameters:  &lt;/p&gt;

&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;td&gt;Command&lt;/td&gt;
            &lt;td&gt;Sub command&lt;/td&gt;
            &lt;td&gt;Args&lt;/td&gt;
            &lt;td&gt;Interpretation&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;/jarvis define osmosis&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;define&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;osmosis&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;display meaning of &quot;osmosis&quot;&lt;/td&gt;
        &lt;/tr&gt;
        
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;/jarvis urban Net Forget&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;urban&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;Net Forget&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Search in Urban dictionary for &quot;Net Forget&quot;&lt;/td&gt;
        &lt;/tr&gt;
        
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;/jarvis pugme&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;pugme&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;show me a random image of a pug!&lt;/td&gt;
        &lt;/tr&gt;
        
        &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;/jarvis deploy api to test&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;api to test&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;deploy latest build from jenkins to test machine&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt; 

&lt;p&gt;This meant that in clojure, all I had to do to work with sub commands, is put the &lt;code&gt;text&lt;/code&gt; parameter through a &lt;a href=&quot;https://github.com/vinaynaidu/SpaceRain/blob/master/src/spacerain/core.clj#L23-L30&quot; target=&quot;_blank&quot;&gt;switch block&lt;/a&gt; and call appropriate function.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(let [sub-command (first text)
      args (string/join &amp;quot; &amp;quot; (rest text))]
    (case (first text)
      &amp;quot;pugme&amp;quot; (t/pugbomb 1)
      &amp;quot;define&amp;quot; (t/define args)
      &amp;quot;urban&amp;quot; (t/urban-define args)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From here on out, the individual functions are responsible for performing the appropriate task and send a json payload response with 200 headers. For example, the &lt;code&gt;pugbomb&lt;/code&gt;&amp;#39;s task is to get a random pug image and send that url path in the payload, something akin to:   &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;;Returns 1 pug url
(let [pugs (client/get &amp;quot;http://pugme.herokuapp.com/bomb?count=1&amp;quot;)
      pug-url (-&amp;gt; (ch/parse-string (get-in response [:body]) true) :pugs first)
      response {:text p
                :username &amp;quot;Jarvis&amp;quot;
                :channel channel_id}]
    (post-to-slack response))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, I&amp;#39;m using &lt;code&gt;pugme.herokuapp.com&lt;/code&gt; api to get an array of random pug image urls, with count 1 so there will just be one item in the array, and returning the url in payload.  &lt;/p&gt;

&lt;p&gt;All tasks are performed in the &lt;code&gt;spacerain.tasks&lt;/code&gt; &lt;a href=&quot;https://github.com/vinaynaidu/SpaceRain/blob/master/src/spacerain/task.clj&quot; target=&quot;_blank&quot;&gt;namespace&lt;/a&gt;. Have a look around the project and you will understand how most functions work.  &lt;/p&gt;

&lt;h3&gt;Mashape API&lt;/h3&gt;

&lt;p&gt;I mentioned earlier that the bot provides cambridge dictionary and urban dictionary meaning to words, via &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;urban&lt;/code&gt; sub commands. I originally looked into using their own api&amp;#39;s and while there were plenty free dictionary api&amp;#39;s available, they quality was questionable and cambridge only had a pay to use api&amp;#39;s. Urban dictionary offered no api&amp;#39;s at all. After looking around a little bit more, I ended up using &lt;a href=&quot;https://market.mashape.com/explore&quot; target=&quot;_blank&quot;&gt;Mashape API&lt;/a&gt;. It somehow provides a lot of good quality api&amp;#39;s, urban dictionary included! and it is free to use up to certain requests an hour. Seeing as the bot was being used for a simple in-house purpose for a small startup, this suited me perfectly.  &lt;/p&gt;

&lt;p&gt;You&amp;#39;ll need to signup to &lt;a href=&quot;https://market.mashape.com/&quot; target=&quot;_blank&quot;&gt;Mashape&lt;/a&gt; and generate your own application key to continue using the api&amp;#39;s.  &lt;/p&gt;

&lt;p&gt;Another thing to note here: Heroku uses &lt;a href=&quot;https://devcenter.heroku.com/articles/config-vars#setting-up-config-vars-for-a-deployed-application&quot; target=&quot;_blank&quot;&gt;environment variables&lt;/a&gt; for configuration, so they&amp;#39;ll have to be setup using heroku toolbelt. I&amp;#39;m using &lt;a href=&quot;https://github.com/weavejester/environ&quot; target=&quot;_blank&quot;&gt;Environ&lt;/a&gt;, a clojure library to read in my &lt;a href=&quot;https://github.com/vinaynaidu/SpaceRain/blob/master/src/spacerain/config.clj#L32&quot; target=&quot;_blank&quot;&gt;Mashape key&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;That pretty much details the SpaceRain project and how I setup a custom Slack bot. Feel free to use the code, fork the repo, and/or submit pull requests. If you have any questions, you can always catch me at &lt;a href=&quot;https://twitter.com/padfootprong&quot; target=&quot;_blank&quot;&gt;@padfootprong&lt;/a&gt; &lt;/p&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 16:16:00 +0100</pubDate>
        <link>http://blog.vinaynaidu.com/2015/09/08/custom-slackbot-integration/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2015/09/08/custom-slackbot-integration/</guid>
        
        
      </item>
    
      <item>
        <title>Customizing fiddler</title>
        <description>&lt;p&gt;I use &lt;A href=&quot;http://www.telerik.com/fiddler&quot; target=&quot;_blank&quot;&gt;fiddler&lt;/a&gt; for all my api testing, development and debugging purposes. 
It&amp;#39;s simple enough to start with and comes with a lot of functionalities. It lets me capture incoming and outgoing traffic from any application
and inspect headers and response in a range of formats. All in all, it&amp;#39;s a great tool in any developer&amp;#39;s arsenal and over the years I&amp;#39;ve come to 
love it.  &lt;/p&gt;

&lt;p&gt;One thing that always annoyed me, though, is that fiddler starts up like this:  &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/fiddler-old-startup.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;  &lt;/p&gt;

&lt;p&gt;Being primarily interested in testing out my REST API, every time I start up fiddler, I:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;switch to &lt;code&gt;Composer&lt;/code&gt; tab,then to &lt;code&gt;Options&lt;/code&gt; and check the &lt;code&gt;tear apart&lt;/code&gt; option, to seperate the composer window&lt;/li&gt;
&lt;li&gt;Move and resize seperated window to appropriate position &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This looks something like this: &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/fiddler-composer-away.jpg&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This lets me easily test my api endpoints and inspect the response without a lot of switching tabs around. 
While the main window remembers it&amp;#39;s position and size, the composer window starts of fresh and I always have to manually fix it. Over the last 4 or so years, 
it&amp;#39;s become a bit of a chore to manually doing this and I while wondering if there was a way to better way to do this, 
I shot off an email via fiddler feedback (under help menu) describing my (trivial) problem.  &lt;/p&gt;

&lt;p&gt;I got a reply right away from the awesome &lt;a href=&quot;https://twitter.com/ericlaw&quot; target=&quot;_blank&quot;&gt;Eric Lawrence&lt;/a&gt;, the creator of fiddler, detailing 
how to do just that. Turns out, fiddler supports customisations through scripting and to automate what I want, all I had to do was:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click Rules &amp;gt; Customize Rules to open the FiddlerScript&lt;/li&gt;
&lt;li&gt;Scroll to the &lt;code&gt;OnBoot&lt;/code&gt; function and add the following lines inside it:&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- codeblock seperator --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;FiddlerApplication.UI.actQuickExec(&amp;quot;!composer move 123,456,789,1000&amp;quot;);
FiddlerApplication.UI.actQuickExec(&amp;quot;!composer activate Scratchpad&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line get composer to detach and itself from main window and set it&amp;#39;s position on screen, with &lt;code&gt;XPos&lt;/code&gt;, &lt;code&gt;YPos&lt;/code&gt;, &lt;code&gt;Width&lt;/code&gt; and &lt;code&gt;Height&lt;/code&gt; for the composer&amp;#39;s window.
The second line will open up the &lt;code&gt;Scratchpad&lt;/code&gt; tab on composer window. You can of course change it to &lt;code&gt;Parsed&lt;/code&gt; or any other tabs and that works well enough.  &lt;/p&gt;

&lt;p&gt;Things to note here though, initially, my whole &lt;code&gt;onBoot&lt;/code&gt; method was commented out, and I had to uncomment it to get this working. Oh, the 
FiddlerScript is supported from version &lt;code&gt;4.4.7.1&lt;/code&gt; and up.&lt;/p&gt;

&lt;p&gt;Another cool tip about fiddler: if you usually don&amp;#39;t want to capture all the traffic going in and out from every application, but just want fiddler&amp;#39;s traffic, 
start fiddler with &lt;code&gt;-noattach&lt;/code&gt; parameter and it will do just that. I&amp;#39;ve added shortcut to my taskbar with this param and use that when I&amp;#39;m working with
endpoints, which is most of the time!  &lt;/p&gt;
</description>
        <pubDate>Thu, 27 Aug 2015 19:34:00 +0100</pubDate>
        <link>http://blog.vinaynaidu.com/2015/08/27/fiddler-composer-tweaks/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2015/08/27/fiddler-composer-tweaks/</guid>
        
        
      </item>
    
      <item>
        <title>Continuous integration for .Net projects</title>
        <description>&lt;h1&gt;Continuous integration&lt;/h1&gt;

&lt;p&gt;This post details the steps required to setup Jenkins to download a .Net project from github, build, run tests using Gallio MbUnit, create build artifacts and aggregate results. When I started out with the task at HealthUnlocked, there were plenty articles about jenkins, and github, and .Net, but no comprehensive articles that detailed how to combine all these together.  &lt;/p&gt;

&lt;p&gt;On this blog, I&amp;#39;ve recorded the pitfalls of setting up the server, common errors that I faced, workarounds, and tips and tricks to make it all nice and shiny - and ultimately more useful, in the hopes that it will be useful to me in the future, or anyone else looking for the same things.  &lt;/p&gt;

&lt;h2&gt;Setup required software&lt;/h2&gt;

&lt;p&gt;Assuming the server is a clean slate server running just the OS, I&amp;#39;ve listed the softwares that need to be installed. If something is already available, it can be skipped, of course.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; - The workhorse that is a continuous integration server&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://java.com/en/download/&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt; - Jenkins relies on a JVM behind the scenes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;Visual studio&lt;/a&gt; - VS is not strictly necessary, however .Net Framework is. But Once you have a framework, there are plenty configurations and settings you will need to tweak and installing an express edition of VS will take care of most of that and leave your hands free to work on other things&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/downloads&quot;&gt;git&lt;/a&gt; - Since we&amp;#39;ll be pulling our source code from github, we&amp;#39;ll need git commands to be available on the environment variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once all the required softwares are installed, we&amp;#39;re well on our way to start configuring the job. Jenkins, after installation, makes itself available on the port 8080 so it can be accessed by pointing the browser to &lt;code&gt;http://localhost:8080/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Right. That&amp;#39;s our brand new jenkins server running. But it needs to understand how to work with git, github, and other parts of our build workflow. This is done by installing plugins. I&amp;#39;ve listed the required plugins, plus some of the plugins I like to use to make it all more useful. You can pick which plugins you want to install.&lt;/p&gt;

&lt;p&gt;To install the plugins on jenkins, open up the web interface and go to &lt;code&gt;Manage Jenkins &amp;gt; Manage plugins&lt;/code&gt; and switch to &lt;code&gt;Available&lt;/code&gt; tabs. From here on, you can search the plugins, enable the ones you want, and install them all at once.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jenkins-ci.org/display/JENKINS/Github+Plugin&quot; target=&quot;_blank&quot;&gt;Github plugin&lt;/a&gt; - This plugin integrates Jenkins with github and makes it very easy to configure builds and set status on commits and pull requests&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/MSBuild+Plugin&quot; target=&quot;_blank&quot;&gt;MSBuild plugin&lt;/a&gt; - This allows you to use MSBuild console command to build .NET projects&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Gallio+Plugin&quot; target=&quot;_blank&quot;&gt;Gallio plugin&lt;/a&gt; - Makes it possible to publish the test results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Later in the post, I will go through the optional plugins that I like to use and what they do.&lt;/p&gt;

&lt;h2&gt;Set up Github repository&lt;/h2&gt;

&lt;p&gt;Now that we have all the setup work out of the way, lets start with configuring a new job! Hit the &lt;code&gt;New Item&lt;/code&gt; from the main menu on Jenkins web interface, and choose a &lt;strong&gt;Freestyle project&lt;/strong&gt; - give an appropriate name to your project and you&amp;#39;re ready to configure a freestyle, mix and match style job. &lt;/p&gt;

&lt;p&gt;There are several ways you can configure your job to pull from Github. The best (read most secure, and, recommended) way, is to use a deploy key. &lt;a href=&quot;https://developer.github.com/guides/managing-deploy-keys/&quot; target=&quot;_blank&quot;&gt;Deploy keys&lt;/a&gt; are unique to each repository and will grant the same permissions to anyone using the deploy keys the same permissions the user creating the deploy key has (which is also configurable). So, when you&amp;#39;re creating the deploy key, make sure you have to right read and write permissions.&lt;/p&gt;

&lt;p&gt;We will now need to configure git on the server to work with the deploy keys. Following steps detail how to do that: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create ssh keys with &lt;code&gt;ssk-keygen -t rsa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a config file at &lt;code&gt;~/.ssh/config&lt;/code&gt; with the content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Host {Project-name}
    Hostname github.com
    User git
    IdentityFile /path/to/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;github.com/{Project-name}/settings/keys&lt;/code&gt; and use the &lt;code&gt;id_rsa.pub&lt;/code&gt; created on step 1 to generate your new deploy key.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, back in jenkins web interface, on the new job that we just created, select &lt;strong&gt;Git&lt;/strong&gt; under &lt;em&gt;Source Code Management&lt;/em&gt; with the following values: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repository URL: &lt;code&gt;git@github.com:OrganizationName/Project-name.git&lt;/code&gt; - this &lt;em&gt;has&lt;/em&gt;* to be in the same format. If the project is under a username rather than an organization, replace OrganizationName with the username.&lt;/li&gt;
&lt;li&gt;Credentials: Click on &lt;code&gt;Add&lt;/code&gt; then: 

&lt;ul&gt;
&lt;li&gt;select &lt;strong&gt;SSH Username with private key&lt;/strong&gt; for &lt;code&gt;Kind&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fill in the server/windows account username for &lt;code&gt;Username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Description is optional and can be empty&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Private key&lt;/code&gt;, select &lt;strong&gt;From Jenkins master ~/.ssh&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then hit Add. If everything went well, we should now be able to download the code from Github Repo by building the job.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Troubleshooting hint:&lt;/em&gt; If there is a problem with the timeouts, it us usually the case of not having the right permission to pull the code. This can be debugged by opening the command line as the user Jenkins is running under, and manually pulling the code with &lt;code&gt;git pull project/repo/on/github.git&lt;/code&gt; and that should output any errors that are in he configuration&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Then, under &lt;code&gt;Build Triggers&lt;/code&gt;, choose **Build when a change is pushed to github`. This will build the project everything there has been a new commit on Github.&lt;/p&gt;

&lt;h2&gt;Building the project&lt;/h2&gt;

&lt;p&gt;We have our job downloading the code from Github. Let&amp;#39;s go ahead and build it. Remember the MSBuild plugin we installed above? It needs to be configured to work with the msbuild.exe on the server. Go to &lt;code&gt;Manage Jenkins &amp;gt; Configure system&lt;/code&gt; and locate the &lt;strong&gt;MSBuild&lt;/strong&gt; section. Hit the &lt;strong&gt;Add MSBuild&lt;/strong&gt; button and configure it with the following values: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name: &lt;code&gt;MSBuild4&lt;/code&gt; - This can be anything, I usually name it after the .net framework&lt;/li&gt;
&lt;li&gt;Path to MSBuild: &lt;code&gt;c:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe&lt;/code&gt; - this is the default path of the msbuild.exe, though it may defer depending on the configuration.&lt;/li&gt;
&lt;li&gt;Default parameters: leave this field empty&lt;/li&gt;
&lt;li&gt;Install automatically: leave unchecked&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then hit save.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/msbuild-warning.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Note:&lt;/em&gt; Once configured, Jenkins may warn about &lt;code&gt;Path to MSBuild&lt;/code&gt; is not a valid value, something along the lines of &lt;strong&gt;&lt;code&gt;c:\...\msbuild.exe&lt;/code&gt; is not a directory on the Jenkins master&lt;/strong&gt; - this can be ignored safely. I am note entirely sure why the warning popups up, but if I remove &lt;code&gt;msbuild.exe&lt;/code&gt; and just list the parent directory, the build fails.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Back in the main job configuration, Add a new build step - &lt;strong&gt;Build a visual Studio project or solution using MSBuild&lt;/strong&gt; with the configuration: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MSBuild Version: &lt;strong&gt;MSBuild4&lt;/strong&gt; - choose the name of the build we just setup earlier&lt;/li&gt;
&lt;li&gt;MSBuild Build file: &lt;strong&gt;Project.sln&lt;/strong&gt; - the solution name or project name of the project that needs to be built.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command Line Arguments: Arguments to be passed to &lt;code&gt;msbuild.exe&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/p:Configuration=Release_MySQL /p:DeployOnBuild=true /p:DeleteExistingFiles=True /p:PublishMethod=FileSystem /p:publishUrl=C:\Publish\Aurora-Api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Note:&lt;/em&gt; &lt;code&gt;/m:2&lt;/code&gt; on command line arguments will enable parallel builds, while visual studio version can be changed with &lt;code&gt;/p:&lt;/code&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;I like to make sure everything is working after each step, by building the project to see if it&amp;#39;s doing what it is supposed to be doing. This lets me fix any issues that may crawl up before it bubbles up to the further steps&lt;/p&gt;

&lt;h2&gt;Running unit tests with Gallio MbUnit&lt;/h2&gt;

&lt;p&gt;Under build step, add a new &lt;code&gt;build step &amp;gt; Execute windows batch command&lt;/code&gt; and add the command line to run gallio.echo.exe on the project.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;C:\Program Files\Gallio\bin\Gallio.Echo.exe&amp;quot; /report-type:xml /verbosity:quiet &amp;quot;Project-name.Tests\bin\Release\*.Tests.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command can just be run on command line, from the workspace folder, to make sure it works and tweak if necesary before adding it here.   &lt;/p&gt;

&lt;p&gt;Once that&amp;#39;s done, Jenkins should be fetching code from github, building and testing the solution merrily. Hooray!&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/jenkins-build-and-test.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The tests are being published to &lt;code&gt;Reports&lt;/code&gt; folder though, it would be more useful if it was displayed with the job, and we could see an overview of what failed. Remember the Gallio plugin we installed earlier? that&amp;#39;s exactly what the plugin does. So let&amp;#39;s go ahead and configure that.&lt;/p&gt;

&lt;p&gt;Create a new &lt;strong&gt;Post Build&lt;/strong&gt; step and add the &lt;code&gt;xUnit test result report&lt;/code&gt; step&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;strong&gt;Gallio-N/A&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;For Patterns, add &lt;code&gt;Reports/*.xml&lt;/code&gt; as that&amp;#39;s the location of our test report xml output (configured on command line step above)&lt;/li&gt;
&lt;li&gt;Check &lt;strong&gt;Delete temporart JUnit files&lt;/strong&gt; and &lt;strong&gt;Stop and set the build to failed status if there are errors when processing a result file&lt;/strong&gt;. Depending on the project type, the others can be enabled too. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also configure the failed and skipped test threshold limits. Leaving the boxes empty will fail the build if any test fails or is skipped. &lt;/p&gt;

&lt;p&gt;Once configured, the section will look something like this&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/publish-report.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Simple stuff!&lt;/p&gt;

&lt;h2&gt;Configuring useful post build tasks&lt;/h2&gt;

&lt;p&gt;While the above steps are sufficient to build and test the project, we can do improve the job and make Jenkins more useful. &lt;/p&gt;

&lt;h4&gt;1. Archive the artifacts&lt;/h4&gt;

&lt;p&gt;Artifacts are the published files - the resulting files of a successful build. We can tell Jenkins what needs to be archived so the archive can be directly published to staging server, if needed, or downloaded and used on whim. &lt;/p&gt;

&lt;p&gt;Set the artifacts by adding a new &lt;code&gt;Post Build &amp;gt; Archive the artifacts&lt;/code&gt; task and in the &lt;strong&gt;Files to archive:&lt;/strong&gt; section, provide a csv of all the necessary files. Wildcards can be used as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Project-name\bin\*,Project-name\Global.asax,Project-name\lib\*,Project-name\Web.config,Project-name\db.config,Project-name\settings.config,Project-name\log4net.config,assets\*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the project is hosted on EC2, there are AWS plugins available that will enable the artifacts to be deployed directly to the EC2 instance.&lt;/p&gt;

&lt;h4&gt;2. Scan workspace for open tasks&lt;/h4&gt;

&lt;p&gt;Visual studio has a neat feature where all the comments starting with &lt;code&gt;//TODO:&lt;/code&gt; are listed under the &lt;strong&gt;TODO&lt;/strong&gt; pane. We can use a plugin in Jenkins that scans all the files and keeps track of such comments, and lists new items or graphs count over time. I find it useful to spreed through them to see if there is something important that needs to be done before a release&lt;/p&gt;

&lt;p&gt;The functionality is available via the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin&quot; target=&quot;_blank&quot;&gt;Scan workspace plugin&lt;/a&gt; and can be included in the job by adding a new post build step. I add the step &lt;strong&gt;Scan workspace for open tasks&lt;/strong&gt; and configure it like so: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files to scan: &lt;code&gt;**/*.cs&lt;/code&gt; - this scans all directores in the workspace for .cs files&lt;/li&gt;
&lt;li&gt;Files to exclude: leave blank&lt;/li&gt;
&lt;li&gt;Tasks tags: &lt;strong&gt;High priority:&lt;/strong&gt; &lt;code&gt;Fixme&lt;/code&gt;, &lt;strong&gt;Normal:&lt;/strong&gt; &lt;code&gt;TODO&lt;/code&gt;, &lt;strong&gt;Low:&lt;/strong&gt; &lt;code&gt;TBD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That will now help Jenkins keep tracks of the list of things for us &amp;#39;to do&amp;#39;&lt;/p&gt;

&lt;h4&gt;3. Workspace cleanup after successful build&lt;/h4&gt;

&lt;p&gt;The Gallio plugin will scan &lt;code&gt;Reports/*.xml&lt;/code&gt; for all reports and each time the test is run, that will result in a new xml file. If the directory is not clearned, they accumulate over time and when one of the test fail, they always fail - because each time the plugin looks at all the files. This was one of the gotchas that took me a while to uncover in the very beginning. There are several ways we can avoid it, but the easiest would be to cleanup directories after the build. The results will be stored in Jenkins db so removing the reports after they are archived will not affect the tracking capabilities of Jenkins.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Workspace+Cleanup+Plugin&quot; target=&quot;_blank&quot;&gt;Workspace cleanup plugin&lt;/a&gt; provides a minimal configuration and is very easy to configure. &lt;/p&gt;

&lt;p&gt;Add this step to the job with, yet again, new post build task &lt;strong&gt;Delete workspace when build is done&lt;/strong&gt; and set the configurations as needed:  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;include (from dropdown)&lt;/code&gt; and &lt;code&gt;Reports/*&lt;/code&gt; tells it to delete all filese from our reports folder&lt;/p&gt;

&lt;p&gt;When that&amp;#39;s done, you can see jenkins scanning for the comments &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/jenkins-post-build.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4&gt;4. List github branches with build status&lt;/h4&gt;

&lt;p&gt;Jenkins can be configured to build specific branches only, but if you&amp;#39;re building all branches then the list of successful builds on Jenkins can get confusing. There is no easy way to say which build was from which branch, short of clicking each of them and checking for the commit hash and comparing tasks on github.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.jenkins-ci.org/display/JENKINS/Groovy+Postbuild+Plugin&quot; target=&quot;_blank&quot;&gt;Groovy post build plugin&lt;/a&gt; will help us with adding custom values to the build list. &lt;/p&gt;

&lt;p&gt;On post build, add a new &lt;strong&gt;Groovy Postbuild&lt;/strong&gt; task, and enter the following script in the script textbox: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;def matcher = manager.getLogMatcher(&amp;quot;.*Checking out Revision (.*) (.*)\$&amp;quot;)
if(matcher?.matches()) {
    branch = matcher.group(2).substring(8,matcher.group(2).length()-1)
    commit = matcher.group(1).substring(0,6)
    githuburl = manager.build.getParent().getProperty(&amp;quot;com.coravy.hudson.plugins.github.GithubProjectProperty&amp;quot;).getProjectUrl().commitId(matcher.group(1))
    description = &amp;quot;&amp;lt;a href=&amp;#39;${githuburl}&amp;#39;&amp;gt;${commit}&amp;lt;/a&amp;gt;&amp;quot;+&amp;quot; - &amp;quot;+branch 
    manager.build.setDescription(description)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now, all our builds list the branch name along with the status! &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/build-history.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4&gt;4. Github status update&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.github.com/v3/repos/statuses/&quot; target=&quot;_blank&quot;&gt;Github statuses&lt;/a&gt; are awesome. It lets you know which commits are broken and which ones are great before you merge the pull request so you know you don&amp;#39;t need to worry about build failing after merge if you&amp;#39;re only building master branch. &lt;/p&gt;

&lt;p&gt;The Github plugin we installed earlier takes care of it. All we need to do to update the build status on github is add a new Post build task &lt;strong&gt;Set pending status on github&lt;/strong&gt; and &lt;strong&gt;Set build status on github&lt;/strong&gt; at the beginning of the build, and at the end, respectively. &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/jenkins-github-status.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Jenkins has plenty of other integrations as well. At HealthUnlocked, we&amp;#39;re a big fan of &lt;a href=&quot;https://slack.com/&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt; and we have a channel of build and test notifications. Slack makes it very easy to write integrations and API&amp;#39;s that can post to channels and we have our Jenkins posting the build status so we know immediately if a build fails! &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/jenkins-slack.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;All these extra (minimal effort) measures will make sure that not only the code everyone writes is well and good, but also notifies people immediately when something is wrong, which is very important, as it eliminates the &amp;quot;out of sight, out of mind&amp;quot; scenarios. Being able to act on a problem is well and good, but being able to know about a problem is just as important.&lt;/p&gt;

&lt;h2&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;I thought I&amp;#39;d add a section about the common problems I&amp;#39;ve faced, while installing Jenkins several times. More often than not, I&amp;#39;d see the same errors crop up and it was handy to have a note of what I did fix it last time it happened.&lt;/p&gt;

&lt;h4&gt;Nuget package manager fails to download packages&lt;/h4&gt;

&lt;p&gt;While compiling from within the Visual Studio IDE, the user has permissions to automatically pull in the depending packages. This isn&amp;#39;t the case when we&amp;#39;re building the project using msbuild.exe and Nuget will not have the right permissions to download. This is an easy to fix problem, though, luckily - Add a new Environment variable &lt;code&gt;EnableNuGetPackageRestore&lt;/code&gt; with value &lt;strong&gt;true&lt;/strong&gt; under system variables and that will take care of this problem.&lt;/p&gt;

&lt;h4&gt;Error MSB4019: Microsoft.WebApplications.Targets was not found&lt;/h4&gt;

&lt;p&gt;This is an annoying problem to be stuck with and it took me a while to work out what was happening. Copy over the &lt;code&gt;WebApplications&lt;/code&gt; folder from your dev machine to the build server and that will fix the problem. The file is usually located at &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find out more about this problem at &lt;a href=&quot;http://stackoverflow.com/a/5344246&quot; target=&quot;_blank&quot;&gt;this stackoverflow answer&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Error CS0234: The type or namespace name &amp;#39;Mvc&amp;#39; does not exist in the namespace &amp;#39;System.Web&amp;#39;&lt;/h4&gt;

&lt;p&gt;What? I swear I installed the right MVC framework on my build server! Well, turns out the build number mismatch causes this problem as well. You could try copying the dlls found on the dev machine over to the build server, but, that will not always work and what&amp;#39;s more, we&amp;#39;ll need to repeat this every time we steup a server.&lt;/p&gt;

&lt;p&gt;Better way to do this would be to remove existing MVC reference on the project, and install it from NuGet. That will help jenkins just download the same version of the package.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Jul 2014 13:00:00 +0100</pubDate>
        <link>http://blog.vinaynaidu.com/2014/07/08/continuous-integration-jenkins-dotnet-github/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2014/07/08/continuous-integration-jenkins-dotnet-github/</guid>
        
        
      </item>
    
      <item>
        <title>Codegolf session - part 2</title>
        <description>&lt;h1&gt;Conway&amp;#39;s game of life&lt;/h1&gt;

&lt;p&gt;Conway&amp;#39;s game of life is another simple idea that I had a lot of fun coding. As &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot; target=&quot;_blank&quot;&gt;wikipedia&lt;/a&gt; puts it, it&amp;#39;s a simple cellular automation based on 4 rules:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any live cell with fewer than two live neighbours dies, as if caused by under-population&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbours lives on to the next generation&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbours dies, as if by overcrowding&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the simplest of terms, Conways game of life can be seen as a 2x2 matrix with binary values, representing the state of the cell, viz dead or alive. With each iteration, the new value of each row-col position of the matrix is recalculated with the above rules in mind. And, since I already had some experience with paper.js, and, because the best way to represent this would be visually, instead of just printing out matrix states, I went ahead with the javascript route.  &lt;/p&gt;

&lt;p&gt;Once the code was up and running, I had a few more minutes to spare, so I added in a &amp;quot;heatmap&amp;quot;, of sorts, to the game. The cell starts off with a green state, and the longer it lives, the close to red it gets. First generation is green and upto 5 different colours of the heatmap, the cell goes from green to yellow to orange to red. This way, I could see which cells are continuing on to next generation easily.  &lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how it looks, once it&amp;#39;s all done: &lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/img/game-of-life-short.gif&quot; alt=&quot;&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The live example of my game of life &lt;a href=&quot;http://vinaynaidu.github.io/projects/codegolf/game-of-life/&quot; target=&quot;_blank&quot;&gt;is here&lt;/a&gt;.  &lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jul 2014 13:00:00 +0100</pubDate>
        <link>http://blog.vinaynaidu.com/2014/07/01/codegolf-2/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2014/07/01/codegolf-2/</guid>
        
        
      </item>
    
      <item>
        <title>Codegolf session - part 1</title>
        <description>&lt;h1&gt;The idea behind codegolf&lt;/h1&gt;

&lt;p&gt;Working in startups can be great for so many reasons. You spend most of your time with a small group of people you trust, and you have a kind of freedom that working in a big corporations don&amp;#39;t seem to offer. Working becomes fun, when the people you work with are wonderful and understanding.  &lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://healthunlocked.com&quot; target=&quot;_blank&quot;&gt;HealthUnlocked&lt;/a&gt;, sometimes we have the luxury of being able to spend some time away from work - a couple of hours, nothing significant. We come together with the most simplest of ideas, and each developer takes that simple idea and make something out of it. Here, I detail those sessions and what came of it  &lt;/p&gt;

&lt;h2&gt;FizzBuzz&lt;/h2&gt;

&lt;p&gt;For our first idea, we came up with &lt;a href=&quot;http://en.wikipedia.org/wiki/Fizz_buzz&quot; target=&quot;_blank&quot;&gt;FizzBuzz&lt;/a&gt;  - an extremely simple idea. You print N numbers, and every time the number is divisible by 3, it&amp;#39;s replaced with Fizz. Every time it&amp;#39;s divisible by 5, Buzz is printed of the number. If the number is divisible by both 3 and 5, you print FizzBuzz. The whole code can be simply summed up in javascript in a few lines:  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This simplicity of the code is exactly what makes it an interesting idea. There are so many posibilities that could come out of it. Of course, just doing exactly what I did above with javascript, while tecnically correct, would be too easy and boring, so I wanted to get a bit creative with it.  &lt;/p&gt;

&lt;p&gt;I had been playing around with &lt;a href=&quot;http://paperjs.org/&quot; target=&quot;_blank&quot;&gt;paper.js&lt;/a&gt; for a while and when I was told we&amp;#39;d be having a fizzbuzz codegolf, I started thinking of ways to code something fun using paper.js. Here&amp;#39;s what I finally ended up doing. Take a picture - any picture. Analyze the picture pixel by pixel, and calculate how close to being black the pixel is. AKA how much &amp;quot;black&amp;quot; is in the pixel. A pixel with &lt;code&gt;#000&lt;/code&gt; would have a 100% blackness factor, while &lt;code&gt;#fff&lt;/code&gt; would have 0%. Do you see what I am getting at, yet? So I take each pixel, make it blue if it&amp;#39;s divisible by 3, red if it&amp;#39;s divisible by 5, and purple if divisible by both 3 and 5. This turned out to be a very bad idea - more because I chose a really large picture of monalisa to process, initially. After some trial and error, I ended up resizing the image within the canvas and grouping a set of pixels. Take a group of 10x10 pixels, calculate the collective blackness factor in the group and apply the same logic.  &lt;/p&gt;

&lt;p&gt;The final code, and the image, can be &lt;a href=&quot;http://vinaynaidu.github.io/projects/codegolf/fizzbuzz/&quot; target=&quot;_blank&quot;&gt;viewed here&lt;/a&gt;. The page is best viewed at some distance. The size of the rendered circles are proportional to the blackness factor. The darker the pixels are, the larger they are drawn. Even so, the page has to be viewed at least at arm&amp;#39;s legth to see the monalisa behind all the circles!&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jun 2014 13:00:00 +0100</pubDate>
        <link>http://blog.vinaynaidu.com/2014/06/10/codegolf-1/</link>
        <guid isPermaLink="true">http://blog.vinaynaidu.com/2014/06/10/codegolf-1/</guid>
        
        
      </item>
    
  </channel>
</rss>
